#!/bin/bash

# Script t·ª± ƒë·ªông x√≥a c√°c package kh√¥ng c·∫ßn thi·∫øt cho deployment chatbot
# D·ª± √°n ch·∫°y trong Docker container, ch·ªâ c·∫ßn gi·ªØ c√°c package c·∫ßn thi·∫øt tr√™n host

set -e

echo "================================================"
echo "Cleanup System Packages - ChatBot D·ªãch v·ª• c√¥ng"
echo "================================================"
echo ""
echo "‚ö†Ô∏è  C·∫¢NH B√ÅO: Script n√†y s·∫Ω x√≥a c√°c package kh√¥ng c·∫ßn thi·∫øt"
echo "Vui l√≤ng ƒë·ªçc k·ªπ danh s√°ch tr∆∞·ªõc khi x√°c nh·∫≠n!"
echo ""

# Packages QUAN TR·ªåNG - KH√îNG X√ìA
# - docker-* (Docker engine)
# - nginx* (Reverse proxy)
# - certbot*, python3-certbot* (SSL certificates)
# - git* (Version control)
# - curl, wget (Download tools, health checks)
# - ssh*, openssh* (Remote access)
# - systemd, udev (System core)
# - python3, python3-* (c√≥ th·ªÉ c·∫ßn cho scripts)
# - coreutils, util-linux (basic utilities)

# ==========================================
# DANH S√ÅCH PACKAGES C√ì TH·ªÇ X√ìA
# ==========================================

# 1. Cloud/VM tools - Kh√¥ng c·∫ßn cho bare metal ho·∫∑c production server
CLOUD_PACKAGES=(
    cloud-init
    cloud-guest-utils
    cloud-initramfs-copymods
    cloud-initramfs-dyn-netconf
    open-vm-tools
)

# 2. Development headers & tools - Build trong Docker, kh√¥ng c·∫ßn tr√™n host
DEV_PACKAGES=(
    linux-headers-6.8.0-31-generic
    linux-headers-6.8.0-31
    linux-headers-generic
    linux-headers-virtual
    linux-libc-dev
    libc-dev-bin
    libc-devtools
    libc6-dev
    libcrypt-dev
    libexpat1-dev
    libpython3-dev
    libpython3.12-dev
    python3-dev
    python3.12-dev
    systemd-dev
    libssl-dev
    libsasl2-dev
    librdkafka-dev
    liblz4-dev
    libzstd-dev
    manpages-dev
    binutils
    binutils-common
    binutils-x86-64-linux-gnu
)

# 3. Desktop/GUI/Font packages - Server kh√¥ng c·∫ßn
GUI_PACKAGES=(
    fonts-dejavu-core
    fonts-dejavu-mono
    fonts-ubuntu-console
    fontconfig-config
    libfontconfig1
    libfreetype6
    libx11-6
    libx11-data
    libxau6
    libxcb1
    libxdmcp6
    libxext6
    libxpm4
    libxmuu1
    xauth
    xdg-user-dirs
    xkb-data
)

# 4. Image processing libraries - Kh√¥ng c·∫ßn tr√™n server
IMAGE_LIBS=(
    libgd3
    libjpeg-turbo8
    libjpeg8
    libjbig0
    libpng16-16t64
    libtiff6
    libwebp7
    libsharpyuv0
    libheif1
    libheif-plugin-aomdec
    libheif-plugin-aomenc
    libheif-plugin-libde265
    libde265-0
    libaom3
)

# 5. Multimedia - Kh√¥ng c·∫ßn
MULTIMEDIA_PACKAGES=(
    libgstreamer1.0-0
)

# 6. Hardware tools - Kh√¥ng c·∫ßn cho server ·∫£o
HARDWARE_TOOLS=(
    bcache-tools
    dmidecode
    efibootmgr
    hdparm
    lshw
    pciutils
    pci.ids
    usbutils
    usb.ids
    sg3-utils
    sg3-utils-udev
)

# 7. Filesystem tools kh√¥ng d√πng
FILESYSTEM_TOOLS=(
    btrfs-progs
    dosfstools
    ntfs-3g
    xfsprogs
    gdisk
    gpart
)

# 8. Advanced storage - Kh√¥ng s·ª≠ d·ª•ng LVM/RAID/multipath
STORAGE_TOOLS=(
    lvm2
    dmsetup
    dmeventd
    libdevmapper-event1.02.1
    liblvm2cmd2.03
    thin-provisioning-tools
    multipath-tools
    mdadm
    kpartx
)

# 9. iSCSI - Kh√¥ng s·ª≠ d·ª•ng
ISCSI_PACKAGES=(
    open-iscsi
    libisns0t64
    libopeniscsiusr
)

# 10. Network tools √≠t d√πng
NETWORK_TOOLS=(
    bind9-dnsutils
    bind9-host
    bind9-libs
    tcpdump
    net-tools
    netcat-openbsd
    traceroute
    iputils-tracepath
)

# 11. Documentation & man pages
DOC_PACKAGES=(
    man-db
    manpages
    info
    groff-base
)

# 12. Debugging/monitoring tools kh√¥ng c·∫ßn thi·∫øt
DEBUG_TOOLS=(
    strace
    trace-cmd
    sosreport
)

# 13. Update/upgrade tools - Qu·∫£n l√Ω manual
UPDATE_PACKAGES=(
    unattended-upgrades
    ubuntu-pro-client
    ubuntu-pro-client-l10n
    command-not-found
)

# 14. PolicyKit/PackageKit - Kh√¥ng c·∫ßn tr√™n server
POLICY_PACKAGES=(
    polkitd
    packagekit
    packagekit-tools
    libpolkit-agent-1-0
    libpolkit-gobject-1-0
    libpackagekit-glib2-18
)

# 15. Misc utilities kh√¥ng c·∫ßn thi·∫øt
MISC_PACKAGES=(
    localepurge
    appstream
    iso-codes
    shared-mime-info
    javascript-common
    libjs-jquery
    libjs-sphinxdoc
    libjs-underscore
    xml-core
    sgml-base
    media-types
)

# ==========================================
# H·ªéI X√ÅC NH·∫¨N
# ==========================================

echo "C√°c packages s·∫Ω b·ªã X√ìA:"
echo ""
echo "‚úì Cloud/VM tools: ${#CLOUD_PACKAGES[@]} packages"
echo "‚úì Development headers/tools: ${#DEV_PACKAGES[@]} packages"
echo "‚úì Desktop/GUI/Fonts: ${#GUI_PACKAGES[@]} packages"
echo "‚úì Image processing libs: ${#IMAGE_LIBS[@]} packages"
echo "‚úì Multimedia: ${#MULTIMEDIA_PACKAGES[@]} packages"
echo "‚úì Hardware tools: ${#HARDWARE_TOOLS[@]} packages"
echo "‚úì Filesystem tools: ${#FILESYSTEM_TOOLS[@]} packages"
echo "‚úì Storage tools (LVM/RAID): ${#STORAGE_TOOLS[@]} packages"
echo "‚úì iSCSI: ${#ISCSI_PACKAGES[@]} packages"
echo "‚úì Network tools: ${#NETWORK_TOOLS[@]} packages"
echo "‚úì Documentation: ${#DOC_PACKAGES[@]} packages"
echo "‚úì Debug tools: ${#DEBUG_TOOLS[@]} packages"
echo "‚úì Update tools: ${#UPDATE_PACKAGES[@]} packages"
echo "‚úì PolicyKit/PackageKit: ${#POLICY_PACKAGES[@]} packages"
echo "‚úì Misc utilities: ${#MISC_PACKAGES[@]} packages"
echo ""

# T·ªïng h·ª£p t·∫•t c·∫£ packages c·∫ßn x√≥a
ALL_REMOVE_PACKAGES=(
    "${CLOUD_PACKAGES[@]}"
    "${DEV_PACKAGES[@]}"
    "${GUI_PACKAGES[@]}"
    "${IMAGE_LIBS[@]}"
    "${MULTIMEDIA_PACKAGES[@]}"
    "${HARDWARE_TOOLS[@]}"
    "${FILESYSTEM_TOOLS[@]}"
    "${STORAGE_TOOLS[@]}"
    "${ISCSI_PACKAGES[@]}"
    "${NETWORK_TOOLS[@]}"
    "${DOC_PACKAGES[@]}"
    "${DEBUG_TOOLS[@]}"
    "${UPDATE_PACKAGES[@]}"
    "${POLICY_PACKAGES[@]}"
    "${MISC_PACKAGES[@]}"
)

echo "T·ªïng c·ªông: ${#ALL_REMOVE_PACKAGES[@]} packages"
echo ""

# ∆Ø·ªõc t√≠nh dung l∆∞·ª£ng gi·∫£i ph√≥ng
echo "üìä ∆Ø·ªõc t√≠nh dung l∆∞·ª£ng gi·∫£i ph√≥ng: ~1GB - 2GB"
echo ""
echo "‚ö†Ô∏è  L∆ØU √ù: C√°c packages QUAN TR·ªåNG sau s·∫Ω KH√îNG b·ªã x√≥a:"
echo "   ‚Ä¢ Docker (docker-ce, docker-compose-plugin, etc.)"
echo "   ‚Ä¢ Nginx & SSL (nginx, certbot, python3-certbot-nginx)"
echo "   ‚Ä¢ SSH (openssh-server, openssh-client)"
echo "   ‚Ä¢ Git (git)"
echo "   ‚Ä¢ Python3 & pip (c·∫ßn cho scripts v√† certbot)"
echo "   ‚Ä¢ Curl, wget (health checks & downloads)"
echo "   ‚Ä¢ Systemd & core utilities"
echo ""

read -p "‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/no): " CONFIRM

if [ "$CONFIRM" != "yes" ]; then
    echo "‚ùå ƒê√£ h·ªßy."
    exit 1
fi

echo ""
echo "üîÑ B·∫Øt ƒë·∫ßu g·ª° c√†i ƒë·∫∑t packages..."
echo ""

# ==========================================
# TH·ª∞C HI·ªÜN X√ìA
# ==========================================

# X√≥a t·ª´ng nh√≥m v√† log k·∫øt qu·∫£
remove_packages() {
    local package_name=$1
    shift
    local packages=("$@")
    
    echo "‚Üí ƒêang x√≥a: $package_name..."
    
    # L·ªçc ch·ªâ nh·ªØng package th·ª±c s·ª± ƒë√£ c√†i
    local to_remove=()
    for pkg in "${packages[@]}"; do
        if dpkg -l | grep -q "^ii.*$pkg "; then
            to_remove+=("$pkg")
        fi
    done
    
    if [ ${#to_remove[@]} -eq 0 ]; then
        echo "  ‚ÑπÔ∏è  Kh√¥ng c√≥ package n√†o c·∫ßn x√≥a"
        return
    fi
    
    sudo apt-get remove -y "${to_remove[@]}" 2>&1 | grep -E "(Removing|Purging|The following)" || true
    echo "  ‚úì ƒê√£ x√≥a ${#to_remove[@]} packages"
}

# X√≥a t·ª´ng nh√≥m
remove_packages "Cloud/VM Tools" "${CLOUD_PACKAGES[@]}"
remove_packages "Development Headers/Tools" "${DEV_PACKAGES[@]}"
remove_packages "Desktop/GUI/Fonts" "${GUI_PACKAGES[@]}"
remove_packages "Image Processing Libraries" "${IMAGE_LIBS[@]}"
remove_packages "Multimedia" "${MULTIMEDIA_PACKAGES[@]}"
remove_packages "Hardware Tools" "${HARDWARE_TOOLS[@]}"
remove_packages "Filesystem Tools" "${FILESYSTEM_TOOLS[@]}"
remove_packages "Storage Tools (LVM/RAID)" "${STORAGE_TOOLS[@]}"
remove_packages "iSCSI" "${ISCSI_PACKAGES[@]}"
remove_packages "Network Tools" "${NETWORK_TOOLS[@]}"
remove_packages "Documentation" "${DOC_PACKAGES[@]}"
remove_packages "Debug Tools" "${DEBUG_TOOLS[@]}"
remove_packages "Update Tools" "${UPDATE_PACKAGES[@]}"
remove_packages "PolicyKit/PackageKit" "${POLICY_PACKAGES[@]}"
remove_packages "Misc Utilities" "${MISC_PACKAGES[@]}"

echo ""
echo "üßπ D·ªçn d·∫πp packages kh√¥ng s·ª≠ d·ª•ng..."

# Autoremove c√°c dependencies kh√¥ng c·∫ßn
sudo apt-get autoremove -y

# X√≥a cache
sudo apt-get autoclean

echo ""
echo "‚úÖ HO√ÄN T·∫§T!"
echo ""
echo "üìä Ki·ªÉm tra dung l∆∞·ª£ng ƒë√£ gi·∫£i ph√≥ng:"
df -h /

echo ""
echo "üîç Ki·ªÉm tra c√°c services quan tr·ªçng v·∫´n ho·∫°t ƒë·ªông:"
echo ""

# Ki·ªÉm tra Docker
if systemctl is-active --quiet docker; then
    echo "‚úì Docker: OK"
else
    echo "‚úó Docker: FAILED - Vui l√≤ng ki·ªÉm tra!"
fi

# Ki·ªÉm tra Nginx
if systemctl is-active --quiet nginx; then
    echo "‚úì Nginx: OK"
else
    echo "‚ö†Ô∏è  Nginx: Not running (c√≥ th·ªÉ ch∆∞a b·∫≠t)"
fi

# Ki·ªÉm tra SSH
if systemctl is-active --quiet ssh; then
    echo "‚úì SSH: OK"
else
    echo "‚úó SSH: FAILED - Vui l√≤ng ki·ªÉm tra!"
fi

echo ""
echo "‚úÖ Script ho√†n t·∫•t. H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u!"
echo ""
echo "üí° C√°c b∆∞·ªõc ti·∫øp theo:"
echo "   1. Reboot server: sudo reboot"
echo "   2. Ki·ªÉm tra Docker: docker ps"
echo "   3. Ki·ªÉm tra chatbot: docker compose up"
echo ""
