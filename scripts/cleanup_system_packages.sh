#!/bin/bash

# Script t·ª± ƒë·ªông x√≥a c√°c package kh√¥ng c·∫ßn thi·∫øt cho deployment chatbot
# D·ª± √°n ch·∫°y trong Docker container, ch·ªâ c·∫ßn gi·ªØ c√°c package c·∫ßn thi·∫øt tr√™n host

set -e

echo "================================================"
echo "Cleanup System Packages - ChatBot D·ªãch v·ª• c√¥ng"
echo "================================================"
echo ""
echo "‚ö†Ô∏è  C·∫¢NH B√ÅO: Script n√†y s·∫Ω x√≥a c√°c package kh√¥ng c·∫ßn thi·∫øt"
echo "Vui l√≤ng ƒë·ªçc k·ªπ danh s√°ch tr∆∞·ªõc khi x√°c nh·∫≠n!"
echo ""

# Packages QUAN TR·ªåNG - KH√îNG X√ìA
# - docker-* (Docker engine)
# - nginx* (Reverse proxy)
# - certbot*, python3-certbot* (SSL certificates)
# - git* (Version control)
# - curl, wget (Download tools, health checks)
# - ssh*, openssh* (Remote access)
# - systemd, udev (System core)
# - python3, python3-* (c√≥ th·ªÉ c·∫ßn cho scripts)
# - coreutils, util-linux (basic utilities)

# ==========================================
# DANH S√ÅCH PACKAGES C√ì TH·ªÇ X√ìA
# ==========================================

# 1. MongoDB - D·ª± √°n KH√îNG s·ª≠ d·ª•ng MongoDB
MONGODB_PACKAGES=(
    mongodb-database-tools
    mongodb-mongosh
    mongodb-org-database-tools-extra
    mongodb-org-database
    mongodb-org-mongos
    mongodb-org-server
    mongodb-org-shell
    mongodb-org-tools
    mongodb-org
)

# 2. LXD - Container system kh√¥ng s·ª≠ d·ª•ng
LXD_PACKAGES=(
    lxd-agent-loader
    lxd-installer
)

# 3. Landscape - Canonical management tool
LANDSCAPE_PACKAGES=(
    landscape-common
)

# 4. FTP clients - Kh√¥ng c·∫ßn
FTP_PACKAGES=(
    ftp
    tnftp
)

# 5. Telnet - Kh√¥ng b·∫£o m·∫≠t, kh√¥ng c·∫ßn
TELNET_PACKAGES=(
    telnet
    inetutils-telnet
)

# 6. Apport - Crash reporting
APPORT_PACKAGES=(
    apport
    apport-symptoms
    apport-core-dump-handler
)

# 7. Plymouth - Boot splash screen
PLYMOUTH_PACKAGES=(
    plymouth
    plymouth-theme-ubuntu-text
)

# 8. Snap - N·∫øu kh√¥ng d√πng snap packages
SNAP_PACKAGES=(
    snapd
)

# 9. Update notifier - Kh√¥ng c·∫ßn tr√™n production server
UPDATE_NOTIFIER_PACKAGES=(
    update-notifier-common
    ubuntu-release-upgrader-core
    update-manager-core
)

# 10. ModemManager - Kh√¥ng c·∫ßn modem tr√™n server
MODEM_PACKAGES=(
    modemmanager
    libmbim-glib4
    libmbim-proxy
    libmbim-utils
    libqmi-glib5
    libqmi-proxy
    libqmi-utils
)

# 11. Development tools - Ch·ªâ c·∫ßn n·∫øu build packages tr√™n host
# Tuy nhi√™n, Docker container ƒë√£ c√≥ build tools, host kh√¥ng c·∫ßn
# C·∫¢NH B√ÅO: Ch·ªâ x√≥a n·∫øu ch·∫Øc ch·∫Øn kh√¥ng build g√¨ tr√™n host
DEV_TOOLS_PACKAGES=(
    build-essential
    gcc-13
    g++-13
    make
    dpkg-dev
    B·ªè comment n·∫øu mu·ªën x√≥a
)

# 12. Byobu, Screen, TMux - Terminal multiplexers (gi·ªØ l·∫°i n·∫øu d√πng)
# Uncomment ƒë·ªÉ x√≥a n·∫øu kh√¥ng d√πng
TERMINAL_PACKAGES=(
    byobu
    screen  
    tmux
)

# 13. C√°c tools √≠t d√πng
MISC_PACKAGES=(
    pastebinit
    needrestart
    deborphan
    bc
    ed
    mtr-tiny
    bolt
    fwupd
    fwupd-signed
    pollinate
    friendly-recovery
    motd-news-config
)

# ==========================================
# H·ªéI X√ÅC NH·∫¨N
# ==========================================

echo "C√°c packages s·∫Ω b·ªã X√ìA:"
echo ""
echo "‚úì MongoDB (kh√¥ng s·ª≠ d·ª•ng): ${#MONGODB_PACKAGES[@]} packages"
echo "‚úì LXD containers: ${#LXD_PACKAGES[@]} packages"
echo "‚úì Landscape: ${#LANDSCAPE_PACKAGES[@]} packages"
echo "‚úì FTP clients: ${#FTP_PACKAGES[@]} packages"
echo "‚úì Telnet: ${#TELNET_PACKAGES[@]} packages"
echo "‚úì Apport (crash reporting): ${#APPORT_PACKAGES[@]} packages"
echo "‚úì Plymouth (boot splash): ${#PLYMOUTH_PACKAGES[@]} packages"
echo "‚úì Snapd: ${#SNAP_PACKAGES[@]} packages"
echo "‚úì Update notifiers: ${#UPDATE_NOTIFIER_PACKAGES[@]} packages"
echo "‚úì ModemManager: ${#MODEM_PACKAGES[@]} packages"
echo "‚úì Misc unused tools: ${#MISC_PACKAGES[@]} packages"
echo ""

# T·ªïng h·ª£p t·∫•t c·∫£ packages c·∫ßn x√≥a
ALL_REMOVE_PACKAGES=(
    "${MONGODB_PACKAGES[@]}"
    "${LXD_PACKAGES[@]}"
    "${LANDSCAPE_PACKAGES[@]}"
    "${FTP_PACKAGES[@]}"
    "${TELNET_PACKAGES[@]}"
    "${APPORT_PACKAGES[@]}"
    "${PLYMOUTH_PACKAGES[@]}"
    "${SNAP_PACKAGES[@]}"
    "${UPDATE_NOTIFIER_PACKAGES[@]}"
    "${MODEM_PACKAGES[@]}"
    "${MISC_PACKAGES[@]}"
    "${DEV_TOOLS_PACKAGES[@]}"
    "${TERMINAL_PACKAGES[@]}"
)

echo "T·ªïng c·ªông: ${#ALL_REMOVE_PACKAGES[@]} packages"
echo ""

# ∆Ø·ªõc t√≠nh dung l∆∞·ª£ng gi·∫£i ph√≥ng
echo "üìä ∆Ø·ªõc t√≠nh dung l∆∞·ª£ng gi·∫£i ph√≥ng: ~500MB - 1GB"
echo ""

read -p "‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/no): " CONFIRM

if [ "$CONFIRM" != "yes" ]; then
    echo "‚ùå ƒê√£ h·ªßy."
    exit 1
fi

echo ""
echo "üîÑ B·∫Øt ƒë·∫ßu g·ª° c√†i ƒë·∫∑t packages..."
echo ""

# ==========================================
# TH·ª∞C HI·ªÜN X√ìA
# ==========================================

# X√≥a t·ª´ng nh√≥m v√† log k·∫øt qu·∫£
remove_packages() {
    local package_name=$1
    shift
    local packages=("$@")
    
    echo "‚Üí ƒêang x√≥a: $package_name..."
    
    # L·ªçc ch·ªâ nh·ªØng package th·ª±c s·ª± ƒë√£ c√†i
    local to_remove=()
    for pkg in "${packages[@]}"; do
        if dpkg -l | grep -q "^ii.*$pkg "; then
            to_remove+=("$pkg")
        fi
    done
    
    if [ ${#to_remove[@]} -eq 0 ]; then
        echo "  ‚ÑπÔ∏è  Kh√¥ng c√≥ package n√†o c·∫ßn x√≥a"
        return
    fi
    
    sudo apt-get remove -y "${to_remove[@]}" 2>&1 | grep -E "(Removing|Purging|The following)" || true
    echo "  ‚úì ƒê√£ x√≥a ${#to_remove[@]} packages"
}

# X√≥a t·ª´ng nh√≥m
remove_packages "MongoDB" "${MONGODB_PACKAGES[@]}"
remove_packages "LXD" "${LXD_PACKAGES[@]}"
remove_packages "Landscape" "${LANDSCAPE_PACKAGES[@]}"
remove_packages "FTP" "${FTP_PACKAGES[@]}"
remove_packages "Telnet" "${TELNET_PACKAGES[@]}"
remove_packages "Apport" "${APPORT_PACKAGES[@]}"
remove_packages "Plymouth" "${PLYMOUTH_PACKAGES[@]}"
remove_packages "Snapd" "${SNAP_PACKAGES[@]}"
remove_packages "Update Notifier" "${UPDATE_NOTIFIER_PACKAGES[@]}"
remove_packages "ModemManager" "${MODEM_PACKAGES[@]}"
remove_packages "Misc" "${MISC_PACKAGES[@]}"

if [ ${#DEV_TOOLS_PACKAGES[@]} -gt 0 ]; then
    remove_packages "Dev Tools" "${DEV_TOOLS_PACKAGES[@]}"
fi

if [ ${#TERMINAL_PACKAGES[@]} -gt 0 ]; then
    remove_packages "Terminal Tools" "${TERMINAL_PACKAGES[@]}"
fi

echo ""
echo "üßπ D·ªçn d·∫πp packages kh√¥ng s·ª≠ d·ª•ng..."

# Autoremove c√°c dependencies kh√¥ng c·∫ßn
sudo apt-get autoremove -y

# X√≥a cache
sudo apt-get autoclean

echo ""
echo "‚úÖ HO√ÄN T·∫§T!"
echo ""
echo "üìä Ki·ªÉm tra dung l∆∞·ª£ng ƒë√£ gi·∫£i ph√≥ng:"
df -h /

echo ""
echo "üîç Ki·ªÉm tra c√°c services quan tr·ªçng v·∫´n ho·∫°t ƒë·ªông:"
echo ""

# Ki·ªÉm tra Docker
if systemctl is-active --quiet docker; then
    echo "‚úì Docker: OK"
else
    echo "‚úó Docker: FAILED - Vui l√≤ng ki·ªÉm tra!"
fi

# Ki·ªÉm tra Nginx
if systemctl is-active --quiet nginx; then
    echo "‚úì Nginx: OK"
else
    echo "‚ö†Ô∏è  Nginx: Not running (c√≥ th·ªÉ ch∆∞a b·∫≠t)"
fi

# Ki·ªÉm tra SSH
if systemctl is-active --quiet ssh; then
    echo "‚úì SSH: OK"
else
    echo "‚úó SSH: FAILED - Vui l√≤ng ki·ªÉm tra!"
fi

echo ""
echo "‚úÖ Script ho√†n t·∫•t. H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u!"
echo ""
echo "üí° C√°c b∆∞·ªõc ti·∫øp theo:"
echo "   1. Reboot server: sudo reboot"
echo "   2. Ki·ªÉm tra Docker: docker ps"
echo "   3. Ki·ªÉm tra chatbot: docker compose up"
echo ""
