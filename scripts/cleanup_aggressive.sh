#!/bin/bash

# Script d·ªçn d·∫πp aggressive - gi·∫£i ph√≥ng t·ªëi ƒëa dung l∆∞·ª£ng
# D√†nh cho tr∆∞·ªùng h·ª£p c·∫ßn gi·∫£i ph√≥ng nhi·ªÅu dung l∆∞·ª£ng

set -e

echo "================================================"
echo "D·ªçn d·∫πp Aggressive - ChatBot D·ªãch v·ª• c√¥ng"
echo "================================================"
echo ""
echo "‚ö†Ô∏è  Script n√†y s·∫Ω x√≥a:"
echo "   ‚Ä¢ MongoDB (n·∫øu c√≥) - ~560MB"
echo "   ‚Ä¢ Snapd (n·∫øu kh√¥ng d√πng snap) - ~200MB"
echo "   ‚Ä¢ Journal logs (gi·ªØ 1 ng√†y) - ~350MB"
echo "   ‚Ä¢ btmp log (failed logins) - ~146MB"
echo "   ‚Ä¢ Large log files - ~200MB"
echo "   ‚Ä¢ APT cache - ~131MB"
echo "   ‚Ä¢ Docker cache - ~26MB"
echo ""
echo "üìä ∆Ø·ªõc t√≠nh gi·∫£i ph√≥ng: ~1.5GB - 2GB"
echo ""

read -p "‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/no): " CONFIRM
if [ "$CONFIRM" != "yes" ]; then
    echo "‚ùå ƒê√£ h·ªßy."
    exit 1
fi

echo ""
echo "üîÑ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp aggressive..."
echo ""

# 1. X√≥a MongoDB
echo "üóÑÔ∏è  [1/10] X√≥a MongoDB..."
if systemctl is-active --quiet mongod 2>/dev/null; then
    echo "   ‚Üí D·ª´ng MongoDB service..."
    sudo systemctl stop mongod
    sudo systemctl disable mongod
fi

if dpkg -l | grep -q mongodb; then
    MONGO_SIZE=$(du -sh /var/lib/mongodb 2>/dev/null | cut -f1 || echo "0")
    echo "   ‚Üí MongoDB data: $MONGO_SIZE"
    sudo apt-get remove -y mongodb* 2>/dev/null || true
    sudo rm -rf /var/lib/mongodb
    sudo rm -rf /var/log/mongodb
    sudo rm -rf /etc/mongodb*
    echo "   ‚úì MongoDB ƒë√£ ƒë∆∞·ª£c x√≥a (~560MB gi·∫£i ph√≥ng)"
else
    echo "   ‚ÑπÔ∏è  MongoDB kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t"
fi
echo ""

# 2. X√≥a Snapd n·∫øu kh√¥ng d√πng snap
echo "üì¶ [2/10] X√≥a Snapd..."
if dpkg -l | grep -q snapd; then
    SNAP_COUNT=$(snap list 2>/dev/null | wc -l || echo "0")
    SNAPD_SIZE=$(du -sh /var/lib/snapd 2>/dev/null | cut -f1 || echo "0")
    echo "   ‚Üí Snap packages: $((SNAP_COUNT - 1)), Size: $SNAPD_SIZE"
    
    if [ "$SNAP_COUNT" -le 1 ]; then
        sudo systemctl stop snapd 2>/dev/null || true
        sudo systemctl disable snapd 2>/dev/null || true
        sudo apt-get remove -y snapd 2>/dev/null || true
        sudo rm -rf /var/lib/snapd
        sudo rm -rf ~/snap
        echo "   ‚úì Snapd ƒë√£ ƒë∆∞·ª£c x√≥a (~200MB gi·∫£i ph√≥ng)"
    else
        echo "   ‚ö†Ô∏è  ƒêang c√≥ snap packages, b·ªè qua"
    fi
else
    echo "   ‚ÑπÔ∏è  Snapd kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t"
fi
echo ""

# 3. D·ªçn d·∫πp Journal logs (gi·ªØ 1 ng√†y)
echo "üìù [3/10] D·ªçn d·∫πp Journal logs..."
echo "   Dung l∆∞·ª£ng hi·ªán t·∫°i:"
sudo journalctl --disk-usage
echo "   ‚Üí Gi·ªØ logs 1 ng√†y g·∫ßn nh·∫•t..."
sudo journalctl --vacuum-time=1d
echo "   ‚Üí Gi·ªõi h·∫°n t·ªëi ƒëa 50MB..."
sudo journalctl --vacuum-size=50M
echo "   Dung l∆∞·ª£ng sau:"
sudo journalctl --disk-usage
echo "   ‚úì Journal logs ƒë√£ ƒë∆∞·ª£c d·ªçn (~350MB gi·∫£i ph√≥ng)"
echo ""

# 4. Truncate btmp (failed login logs)
echo "üîí [4/10] D·ªçn d·∫πp btmp (failed login logs)..."
if [ -f "/var/log/btmp" ]; then
    BTMP_SIZE=$(du -h /var/log/btmp | cut -f1)
    echo "   ‚Üí btmp hi·ªán t·∫°i: $BTMP_SIZE"
    sudo truncate -s 0 /var/log/btmp
    echo "   ‚úì btmp ƒë√£ ƒë∆∞·ª£c truncate (~146MB gi·∫£i ph√≥ng)"
else
    echo "   ‚ÑπÔ∏è  btmp kh√¥ng t·ªìn t·∫°i"
fi
echo ""

# 5. Rotate v√† truncate large logs
echo "üìö [5/10] D·ªçn d·∫πp large log files..."

# auth.log
if [ -f "/var/log/auth.log" ]; then
    AUTH_SIZE=$(du -h /var/log/auth.log | cut -f1)
    echo "   ‚Üí auth.log: $AUTH_SIZE"
    sudo bash -c "> /var/log/auth.log"
    echo "   ‚úì auth.log truncated"
fi

# syslog
if [ -f "/var/log/syslog" ]; then
    SYSLOG_SIZE=$(du -h /var/log/syslog | cut -f1)
    echo "   ‚Üí syslog: $SYSLOG_SIZE"
    sudo bash -c "tail -n 1000 /var/log/syslog > /var/log/syslog.tmp && mv /var/log/syslog.tmp /var/log/syslog"
    echo "   ‚úì syslog gi·ªØ 1000 d√≤ng cu·ªëi"
fi

# X√≥a old rotated logs
sudo find /var/log -type f -name "*.gz" -delete 2>/dev/null || true
sudo find /var/log -type f -name "*.1" -delete 2>/dev/null || true
sudo find /var/log -type f -name "*.old" -delete 2>/dev/null || true

echo "   ‚úì Large logs ƒë√£ ƒë∆∞·ª£c d·ªçn (~200MB gi·∫£i ph√≥ng)"
echo ""

# 6. D·ªçn d·∫πp APT
echo "üì¶ [6/10] D·ªçn d·∫πp APT cache..."
APT_SIZE=$(du -sh /var/cache/apt/archives 2>/dev/null | cut -f1 || echo "0")
echo "   ‚Üí APT cache: $APT_SIZE"
sudo apt-get clean
sudo apt-get autoclean
sudo apt-get autoremove -y
echo "   ‚úì APT cache ƒë√£ ƒë∆∞·ª£c d·ªçn (~131MB gi·∫£i ph√≥ng)"
echo ""

# 7. D·ªçn d·∫πp Docker
echo "üê≥ [7/10] D·ªçn d·∫πp Docker..."
docker system prune -a -f --volumes
echo "   ‚úì Docker ƒë√£ ƒë∆∞·ª£c d·ªçn (~26MB gi·∫£i ph√≥ng)"
echo ""

# 8. D·ªçn d·∫πp temporary files
echo "üóëÔ∏è  [8/10] D·ªçn d·∫πp temporary files..."
sudo rm -rf /tmp/*
sudo rm -rf /var/tmp/*
echo "   ‚úì Temporary files ƒë√£ ƒë∆∞·ª£c x√≥a"
echo ""

# 9. D·ªçn d·∫πp Python cache
echo "üêç [9/10] D·ªçn d·∫πp Python cache..."
if [ -d "$HOME/ChatBot_Dich_vu_cong" ]; then
    cd $HOME/ChatBot_Dich_vu_cong
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    find . -type f -name "*.pyc" -delete 2>/dev/null || true
    echo "   ‚úì Python cache ƒë√£ ƒë∆∞·ª£c x√≥a"
else
    echo "   ‚ÑπÔ∏è  Kh√¥ng t√¨m th·∫•y project directory"
fi
echo ""

# 10. T·ªëi ∆∞u journald config
echo "‚öôÔ∏è  [10/10] T·ªëi ∆∞u journald config..."
JOURNALD_CONF="/etc/systemd/journald.conf"
if [ -f "$JOURNALD_CONF" ]; then
    sudo sed -i 's/#SystemMaxUse=.*/SystemMaxUse=50M/' $JOURNALD_CONF
    sudo sed -i 's/SystemMaxUse=.*/SystemMaxUse=50M/' $JOURNALD_CONF
    sudo sed -i 's/#RuntimeMaxUse=.*/RuntimeMaxUse=25M/' $JOURNALD_CONF
    sudo sed -i 's/RuntimeMaxUse=.*/RuntimeMaxUse=25M/' $JOURNALD_CONF
    sudo systemctl restart systemd-journald
    echo "   ‚úì Journald gi·ªõi h·∫°n: SystemMaxUse=50M, RuntimeMaxUse=25M"
else
    echo "   ‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y journald.conf"
fi
echo ""

echo "============================================"
echo "‚úÖ D·ªåN D·∫∏P AGGRESSIVE HO√ÄN T·∫§T!"
echo "============================================"
echo ""

echo "üìä Dung l∆∞·ª£ng sau khi d·ªçn d·∫πp:"
df -h /
echo ""

echo "üîç Ki·ªÉm tra services quan tr·ªçng:"
systemctl is-active --quiet docker && echo "‚úì Docker: OK" || echo "‚úó Docker: FAILED"
systemctl is-active --quiet nginx && echo "‚úì Nginx: OK" || echo "‚ö†Ô∏è  Nginx: Not running"
systemctl is-active --quiet ssh && echo "‚úì SSH: OK" || echo "‚úó SSH: FAILED"
echo ""

echo "üí° Khuy·∫øn ngh·ªã:"
echo "   1. Reboot server ƒë·ªÉ gi·∫£i ph√≥ng ho√†n to√†n: sudo reboot"
echo "   2. Sau reboot, ch·∫°y: df -h / ƒë·ªÉ xem dung l∆∞·ª£ng"
echo "   3. Thi·∫øt l·∫≠p cron job t·ª± ƒë·ªông d·ªçn d·∫πp h√†ng tu·∫ßn"
echo ""
