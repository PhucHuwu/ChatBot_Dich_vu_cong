#!/bin/bash

# Script d·ªçn d·∫πp b·ªï sung ƒë·ªÉ gi·∫£i ph√≥ng th√™m dung l∆∞·ª£ng
# Ch·∫°y sau cleanup_system_packages.sh

set -e

echo "================================================"
echo "D·ªçn d·∫πp B·ªï sung - ChatBot D·ªãch v·ª• c√¥ng"
echo "================================================"
echo ""

# 1. D·ªçn d·∫πp Docker
echo "üê≥ D·ªçn d·∫πp Docker..."
echo "   ‚Üí X√≥a c√°c container ƒë√£ d·ª´ng..."
docker container prune -f
echo "   ‚Üí X√≥a c√°c image kh√¥ng s·ª≠ d·ª•ng..."
docker image prune -a -f
echo "   ‚Üí X√≥a c√°c volume kh√¥ng s·ª≠ d·ª•ng..."
docker volume prune -f
echo "   ‚Üí X√≥a build cache..."
docker builder prune -f
echo "   ‚úì Docker ƒë√£ ƒë∆∞·ª£c d·ªçn d·∫πp"
echo ""

# 2. D·ªçn d·∫πp journald logs (gi·ªØ 3 ng√†y g·∫ßn nh·∫•t)
echo "üìù D·ªçn d·∫πp Journal logs..."
echo "   Dung l∆∞·ª£ng hi·ªán t·∫°i:"
sudo journalctl --disk-usage
echo "   ‚Üí Gi·ªØ logs 3 ng√†y g·∫ßn nh·∫•t..."
sudo journalctl --vacuum-time=3d
echo "   ‚Üí Gi·ªõi h·∫°n t·ªëi ƒëa 100MB..."
sudo journalctl --vacuum-size=100M
echo "   Dung l∆∞·ª£ng sau khi d·ªçn:"
sudo journalctl --disk-usage
echo ""

# 3. D·ªçn d·∫πp APT
echo "üì¶ D·ªçn d·∫πp APT cache..."
sudo apt-get clean
sudo apt-get autoclean
sudo apt-get autoremove -y
echo "   ‚úì APT cache ƒë√£ ƒë∆∞·ª£c d·ªçn d·∫πp"
echo ""

# 4. D·ªçn d·∫πp temporary files
echo "üóëÔ∏è  D·ªçn d·∫πp temporary files..."
sudo rm -rf /tmp/*
sudo rm -rf /var/tmp/*
echo "   ‚úì Temporary files ƒë√£ ƒë∆∞·ª£c x√≥a"
echo ""

# 5. D·ªçn d·∫πp log files c≈©
echo "üìö D·ªçn d·∫πp log files c≈©..."
sudo find /var/log -type f -name "*.gz" -delete
sudo find /var/log -type f -name "*.1" -delete
sudo find /var/log -type f -name "*.old" -delete
echo "   ‚úì Log files c≈© ƒë√£ ƒë∆∞·ª£c x√≥a"
echo ""

# 5a. D·ªçn d·∫πp c√°c log files l·ªõn
echo "üìä D·ªçn d·∫πp log files l·ªõn..."
# Truncate btmp (failed login attempts) - gi·ªØ file nh∆∞ng x√≥a n·ªôi dung
if [ -f "/var/log/btmp" ]; then
    BTMP_SIZE=$(du -h /var/log/btmp | cut -f1)
    echo "   btmp hi·ªán t·∫°i: $BTMP_SIZE"
    sudo truncate -s 0 /var/log/btmp
    echo "   ‚úì btmp ƒë√£ ƒë∆∞·ª£c truncate"
fi

# Rotate auth.log n·∫øu qu√° l·ªõn (>50MB)
if [ -f "/var/log/auth.log" ]; then
    AUTH_SIZE=$(stat -f%z /var/log/auth.log 2>/dev/null || stat -c%s /var/log/auth.log 2>/dev/null)
    if [ "$AUTH_SIZE" -gt 52428800 ]; then
        echo "   auth.log: $(du -h /var/log/auth.log | cut -f1) - ƒëang rotate..."
        sudo logrotate -f /etc/logrotate.d/rsyslog
        echo "   ‚úì auth.log ƒë√£ ƒë∆∞·ª£c rotate"
    else
        echo "   auth.log: OK (< 50MB)"
    fi
fi

# D·ªçn MongoDB logs n·∫øu c√≥
if [ -d "/var/log/mongodb" ]; then
    MONGO_LOG_SIZE=$(du -sh /var/log/mongodb | cut -f1)
    echo "   MongoDB logs: $MONGO_LOG_SIZE"
    read -p "   X√≥a MongoDB logs? (yes/no): " REMOVE_MONGO_LOGS
    if [ "$REMOVE_MONGO_LOGS" = "yes" ]; then
        sudo rm -rf /var/log/mongodb/*
        echo "   ‚úì MongoDB logs ƒë√£ ƒë∆∞·ª£c x√≥a"
    else
        echo "   ‚äò B·ªè qua MongoDB logs"
    fi
fi
echo ""

# 6. D·ªçn d·∫πp Python cache trong project
echo "üêç D·ªçn d·∫πp Python cache..."
if [ -d "$HOME/ChatBot_Dich_vu_cong" ]; then
    cd $HOME/ChatBot_Dich_vu_cong
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    find . -type f -name "*.pyc" -delete 2>/dev/null || true
    find . -type f -name "*.pyo" -delete 2>/dev/null || true
    echo "   ‚úì Python cache ƒë√£ ƒë∆∞·ª£c x√≥a"
else
    echo "   ‚ÑπÔ∏è  Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c project"
fi
echo ""

# 7. X√≥a old kernels (gi·ªØ kernel hi·ªán t·∫°i + 1 kernel c≈©)
echo "üîß Ki·ªÉm tra old kernels..."
CURRENT_KERNEL=$(uname -r)
echo "   Kernel hi·ªán t·∫°i: $CURRENT_KERNEL"
OLD_KERNELS=$(dpkg -l | grep linux-image | grep -v "$CURRENT_KERNEL" | awk '{print $2}' | grep -v linux-image-generic)
if [ -n "$OLD_KERNELS" ]; then
    echo "   T√¨m th·∫•y old kernels:"
    echo "$OLD_KERNELS"
    read -p "   X√≥a old kernels? (yes/no): " REMOVE_KERNELS
    if [ "$REMOVE_KERNELS" = "yes" ]; then
        sudo apt-get remove -y $OLD_KERNELS
        sudo apt-get autoremove -y
        echo "   ‚úì Old kernels ƒë√£ ƒë∆∞·ª£c x√≥a"
    else
        echo "   ‚äò B·ªè qua x√≥a kernels"
    fi
else
    echo "   ‚ÑπÔ∏è  Kh√¥ng c√≥ old kernels"
fi
echo ""

# 8. Ki·ªÉm tra v√† x√≥a MongoDB n·∫øu kh√¥ng s·ª≠ d·ª•ng
echo "üóÑÔ∏è  Ki·ªÉm tra MongoDB..."
if systemctl is-active --quiet mongod 2>/dev/null; then
    echo "   ‚ö†Ô∏è  MongoDB ƒëang ch·∫°y"
    echo "   N·∫øu chatbot KH√îNG s·ª≠ d·ª•ng MongoDB, b·∫°n c√≥ th·ªÉ x√≥a ƒë·ªÉ gi·∫£i ph√≥ng ~600MB"
    read -p "   D·ª´ng v√† x√≥a MongoDB? (yes/no): " REMOVE_MONGO
    if [ "$REMOVE_MONGO" = "yes" ]; then
        sudo systemctl stop mongod
        sudo systemctl disable mongod
        sudo apt-get remove -y mongodb mongodb-org mongodb-org-server 2>/dev/null || sudo apt-get remove -y mongodb-* 2>/dev/null || true
        sudo rm -rf /var/lib/mongodb
        sudo rm -rf /var/log/mongodb
        sudo apt-get autoremove -y
        echo "   ‚úì MongoDB ƒë√£ ƒë∆∞·ª£c x√≥a"
    else
        echo "   ‚äò Gi·ªØ MongoDB"
    fi
elif dpkg -l | grep -q mongodb; then
    echo "   MongoDB ƒë√£ c√†i nh∆∞ng kh√¥ng ch·∫°y"
    MONGO_SIZE=$(du -sh /var/lib/mongodb 2>/dev/null | cut -f1 || echo "0")
    echo "   Dung l∆∞·ª£ng data: $MONGO_SIZE"
    read -p "   X√≥a MongoDB? (yes/no): " REMOVE_MONGO
    if [ "$REMOVE_MONGO" = "yes" ]; then
        sudo apt-get remove -y mongodb mongodb-org mongodb-org-server 2>/dev/null || sudo apt-get remove -y mongodb-* 2>/dev/null || true
        sudo rm -rf /var/lib/mongodb
        sudo rm -rf /var/log/mongodb
        sudo apt-get autoremove -y
        echo "   ‚úì MongoDB ƒë√£ ƒë∆∞·ª£c x√≥a"
    else
        echo "   ‚äò Gi·ªØ MongoDB"
    fi
else
    echo "   ‚ÑπÔ∏è  MongoDB kh√¥ng c√†i ƒë·∫∑t"
fi
echo ""

# 9. X√≥a snapd n·∫øu kh√¥ng s·ª≠ d·ª•ng snap packages
echo "üì¶ Ki·ªÉm tra Snapd..."
if dpkg -l | grep -q snapd; then
    SNAP_COUNT=$(snap list 2>/dev/null | wc -l || echo "0")
    SNAPD_SIZE=$(du -sh /var/lib/snapd 2>/dev/null | cut -f1 || echo "0")
    echo "   Snap packages: $((SNAP_COUNT - 1))"
    echo "   Dung l∆∞·ª£ng: $SNAPD_SIZE"
    if [ "$SNAP_COUNT" -le 1 ]; then
        read -p "   Kh√¥ng c√≥ snap packages n√†o. X√≥a snapd? (yes/no): " REMOVE_SNAP
        if [ "$REMOVE_SNAP" = "yes" ]; then
            sudo systemctl stop snapd
            sudo systemctl disable snapd
            sudo apt-get remove -y snapd
            sudo rm -rf /var/lib/snapd
            sudo apt-get autoremove -y
            echo "   ‚úì Snapd ƒë√£ ƒë∆∞·ª£c x√≥a"
        else
            echo "   ‚äò Gi·ªØ snapd"
        fi
    else
        echo "   ‚ÑπÔ∏è  ƒêang s·ª≠ d·ª•ng snap packages, gi·ªØ snapd"
    fi
else
    echo "   ‚ÑπÔ∏è  Snapd kh√¥ng c√†i ƒë·∫∑t"
fi
echo ""

# 10. T·ªëi ∆∞u journald config ƒë·ªÉ gi·ªõi h·∫°n log size
echo "‚öôÔ∏è  T·ªëi ∆∞u journald config..."
JOURNALD_CONF="/etc/systemd/journald.conf"
if [ -f "$JOURNALD_CONF" ]; then
    sudo sed -i 's/#SystemMaxUse=/SystemMaxUse=100M/' $JOURNALD_CONF
    sudo sed -i 's/#RuntimeMaxUse=/RuntimeMaxUse=50M/' $JOURNALD_CONF
    sudo systemctl restart systemd-journald
    echo "   ‚úì Journald ƒë√£ ƒë∆∞·ª£c gi·ªõi h·∫°n: SystemMaxUse=100M, RuntimeMaxUse=50M"
else
    echo "   ‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y $JOURNALD_CONF"
fi
echo ""

echo "‚úÖ D·ªåN D·∫∏P HO√ÄN T·∫§T!"
echo ""
echo "üìä Dung l∆∞·ª£ng sau khi d·ªçn d·∫πp:"
df -h /
echo ""

echo "üí° Khuy·∫øn ngh·ªã th√™m:"
echo "   1. Thi·∫øt l·∫≠p logrotate cho application logs"
echo "   2. ƒê·ªãnh k·ª≥ ch·∫°y: docker system prune -a (1 tu·∫ßn/l·∫ßn)"
echo "   3. Monitoring disk usage: ./scripts/analyze_disk_usage.sh"
echo "   4. Truncate btmp ƒë·ªãnh k·ª≥: sudo truncate -s 0 /var/log/btmp"
echo "   5. N·∫øu dung l∆∞·ª£ng v·∫´n kh√¥ng ƒë·ªß, c√¢n nh·∫Øc n√¢ng c·∫•p VPS"
echo ""
echo "‚ö° ∆Ø·ªõc t√≠nh ƒë√£ gi·∫£i ph√≥ng: ~500MB - 1.5GB"
echo ""
