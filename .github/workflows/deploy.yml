name: Deploy to Production Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Ubuntu Server
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          GITHUB_REPO: ${{ github.repository }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << ENDSSH
            set -e
            
            echo "================================================"
            echo "üöÄ Starting deployment..."
            echo "================================================"
            
            # ƒê∆∞·ªùng d·∫´n deploy
            DEPLOY_DIR="/opt/chatbot-dichvucong"
            
            # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
            if [ ! -d "$DEPLOY_DIR" ]; then
              echo "üìÅ Creating deploy directory..."
              mkdir -p $DEPLOY_DIR
            fi
            
            cd $DEPLOY_DIR
            
            # Clone ho·∫∑c pull code
            if [ ! -d ".git" ]; then
              echo "üì• Cloning repository..."
              git clone https://github.com/PhucHuwu/ChatBot_Dich_vu_cong.git .
            else
              echo "üì• Pulling latest code..."
              git fetch origin
              git reset --hard origin/main
            fi
            
            # Ki·ªÉm tra v√† t·∫°o .env file n·∫øu ch∆∞a c√≥
            if [ ! -f .env ]; then
              echo "üîê Creating .env file from template..."
              echo "APP_ENV=production" > .env
              echo "DEBUG=False" >> .env
              echo "HOST=0.0.0.0" >> .env
              echo "PORT=8000" >> .env
              echo "WORKERS=2" >> .env
              echo "BASE_PATH=" >> .env
              echo "ALLOWED_ORIGINS=*" >> .env
              echo "GROQ_API_KEY=REPLACE_WITH_YOUR_API_KEY" >> .env
              echo "LLM_MODEL=openai/gpt-oss-120b" >> .env
              echo "LLM_TEMPERATURE=1" >> .env
              echo "LLM_MAX_TOKENS=8192" >> .env
              echo "LLM_TIMEOUT=60" >> .env
              echo "LLM_REASONING_EFFORT=medium" >> .env
              echo "LLM_STREAM=True" >> .env
              echo "EMBEDDING_MODEL=sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2" >> .env
              echo "EMBEDDING_BATCH_SIZE=32" >> .env
              echo "EMBEDDING_DEVICE=cpu" >> .env
              echo "SIMILARITY_THRESHOLD=1.2" >> .env
              echo "TOP_K_DEFAULT=8" >> .env
              echo "ENABLE_CACHE=True" >> .env
              echo "CACHE_MAX_SIZE=500" >> .env
              echo "CACHE_TTL=3600" >> .env
              echo "LOG_LEVEL=INFO" >> .env
              echo "ENABLE_JSON_LOGGING=False" >> .env
              echo "EXPOSE_DOCS=False" >> .env
              echo "MAX_QUERY_LENGTH=1000" >> .env
              echo "‚ö†Ô∏è  WARNING: Please update GROQ_API_KEY in .env file manually!"
            else
              echo "‚úÖ .env file already exists, keeping existing configuration"
            fi
            
            # Stop v√† x√≥a containers c≈© ho√†n to√†n
            echo "üõë Stopping and removing old containers..."
            docker-compose down -v --remove-orphans 2>/dev/null || true
            docker rm -f chatbot-dichvucong 2>/dev/null || true
            docker container prune -f
            
            # Build v√† start containers m·ªõi
            echo "üî® Building and starting containers..."
            docker-compose up -d --build
            
            # Cleanup images c≈©
            echo "üßπ Cleaning up old images..."
            docker image prune -f
            
            # Ki·ªÉm tra health
            echo "üè• Waiting for service to be healthy..."
            sleep 10
            
            MAX_RETRIES=30
            RETRY_COUNT=0
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if curl -f http://localhost:8000/health > /dev/null 2>&1; then
                echo "‚úÖ Service is healthy!"
                break
              fi
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚è≥ Waiting... ($RETRY_COUNT/$MAX_RETRIES)"
              sleep 2
            done
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "‚ùå Service health check failed!"
              docker-compose logs --tail=50
              exit 1
            fi
            
            echo "================================================"
            echo "‚úÖ Deployment completed successfully!"
            echo "================================================"
            docker-compose ps
          ENDSSH

      - name: Deployment Status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi
